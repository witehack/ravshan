from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
import asyncio
import logging
from openai import AsyncOpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "7742435607:AAEE7EaoNzdy6pE6a8rdpuXBB_MFX3p1L0Q"
OPENAI_API_KEY = "sk-lT7U7U3zRLhzNg_PoVw0h11gbD63FjUTCCPttkDYVCAhhOg_-NaayzJsXQ1r_ZM3vyTX4cXQqKg51-BEN6T_SA"
OPENAI_BASE_URL = "https://api.langdock.com/openai/eu/v1"

bot = Bot(token=TOKEN)
dp = Dispatcher()
client = AsyncOpenAI(base_url=OPENAI_BASE_URL, api_key=OPENAI_API_KEY)

# –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
MODES = {
    'default': {
        'prompt': "–¢—ã Ravshan ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏–∑ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞. –û—Ç–≤–µ—á–∞–π —Å —é–º–æ—Ä–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞ '–¥—Ä—É–∂–æ–∫', '–±—Ä–∞—Ç'.",
        'temperature': 0.7
    },
    'solver': {
        'prompt': "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä. –†–µ—à–∞–π –∑–∞–¥–∞—á–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–≥–∞–º:\n1. –ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏—è\n2. –§–æ—Ä–º—É–ª—ã/—Ç–µ–æ—Ä–∏—è\n3. –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ\n4. –û—Ç–≤–µ—Ç",
        'temperature': 0.1
    }
}


@dp.message(Command("start"))
async def start(message: types.Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Ravshan ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É—á–µ–±–µ!\n\n"
        "üîπ <b>–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º</b>: –æ–±—â–µ–Ω–∏–µ —Å —é–º–æ—Ä–æ–º\n"
        "üîπ <b>–†–µ–∂–∏–º —Ä–µ—à–∞—Ç–µ–ª—è</b>: /solve - –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∑–∞–¥–∞—á\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "<code>/solve –†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2x + 5 = 15</code>\n"
        "<code>/solve –ö–∞–∫–æ–π –æ–±—ä–µ–º –≤–æ–¥–æ—Ä–æ–¥–∞ –≤—ã–¥–µ–ª–∏—Ç—Å—è –ø—Ä–∏ —Ä–µ–∞–∫—Ü–∏–∏ HCl —Å Zn?</code>"
    )
    await message.answer(text, parse_mode="HTML")


@dp.message(Command("solve"))
async def solve_mode(message: types.Message):
    task = message.text.split('/solve')[-1].strip()
    if not task:
        return await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ /solve")

    try:
        await bot.send_chat_action(message.chat.id, "typing")
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": MODES['solver']['prompt']},
                {"role": "user", "content": task}
            ],
            temperature=MODES['solver']['temperature']
        )

        answer = response.choices[0].message.content
        await message.answer(f"üîç <b>–†–µ—à–µ–Ω–∏–µ:</b>\n\n{answer}", parse_mode="HTML")

    except Exception as e:
        logger.error(f"Solve error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")


@dp.message()
async def default_mode(message: types.Message):
    try:
        await bot.send_chat_action(message.chat.id, "typing")
        response = await client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": MODES['default']['prompt']},
                {"role": "user", "content": message.text}
            ],
            temperature=MODES['default']['temperature']
        )
        await message.answer(response.choices[0].message.content)

    except Exception as e:
        logger.error(f"Chat error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())